# Generated by Django 2.1.11 on 2021-01-03 11:13

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Browser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('value', models.CharField(max_length=20)),
                ('remark', models.TextField(null=True)),
                ('installPath', models.TextField(null=True)),
                ('driverPath', models.TextField(null=True)),
            ],
            options={
                'db_table': 'Browser',
            },
        ),
        migrations.CreateModel(
            name='Element',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('projectId', models.IntegerField()),
                ('pageId', models.IntegerField()),
                ('name', models.CharField(max_length=20)),
                ('remark', models.TextField(null=True)),
                ('createTime', models.DateTimeField(default=django.utils.timezone.now)),
                ('by', models.CharField(max_length=20)),
                ('locator', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'element',
            },
        ),
        migrations.CreateModel(
            name='Environment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('projectId', models.IntegerField(null=True)),
                ('name', models.CharField(max_length=20)),
                ('host', models.TextField()),
                ('remark', models.TextField(null=True)),
            ],
            options={
                'db_table': 'Environment',
            },
        ),
        migrations.CreateModel(
            name='EnvironmentLogin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('loginId', models.IntegerField()),
                ('environmentId', models.IntegerField()),
                ('parameter', models.TextField()),
            ],
            options={
                'db_table': 'EnvironmentLogin',
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('projectId', models.IntegerField()),
                ('name', models.CharField(max_length=20)),
                ('type', models.IntegerField(default=2)),
                ('package', models.CharField(max_length=200, null=True)),
                ('clazz', models.CharField(max_length=50, null=True)),
                ('method', models.CharField(max_length=50, null=True)),
                ('params', models.TextField(null=True)),
                ('steps', models.TextField(null=True)),
                ('createTime', models.DateTimeField(default=django.utils.timezone.now)),
                ('remark', models.TextField(null=True)),
            ],
            options={
                'db_table': 'keyword',
            },
        ),
        migrations.CreateModel(
            name='LoginConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('projectId', models.IntegerField()),
                ('name', models.CharField(max_length=20)),
                ('remark', models.TextField(null=True)),
                ('checkType', models.TextField(default='')),
                ('checkValue', models.TextField(default='')),
                ('checkText', models.TextField(default='')),
                ('selectText', models.TextField(default='')),
                ('steps', models.TextField()),
                ('params', models.TextField()),
                ('createTime', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'login',
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('projectId', models.IntegerField()),
                ('name', models.CharField(max_length=20)),
                ('remark', models.TextField(null=True)),
                ('createTime', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'page',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('remark', models.TextField(null=True)),
                ('creator', models.CharField(default='少年', max_length=20)),
                ('createTime', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'project',
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('taskId', models.IntegerField(default=0, null=True)),
                ('projectId', models.IntegerField()),
                ('testcaseId', models.IntegerField()),
                ('browsers', models.TextField(null=True)),
                ('beforeLogin', models.TextField(null=True)),
                ('environments', models.TextField(null=True)),
                ('status', models.IntegerField(default=10)),
                ('parameter', models.TextField()),
                ('steps', models.TextField()),
                ('checkType', models.TextField()),
                ('checkValue', models.TextField()),
                ('checkText', models.TextField(null=True)),
                ('selectText', models.TextField(null=True)),
                ('createTime', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'Result',
            },
        ),
        migrations.CreateModel(
            name='SplitResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('environmentId', models.IntegerField(null=True)),
                ('browserId', models.IntegerField(null=True)),
                ('resultId', models.IntegerField()),
                ('loginStatus', models.IntegerField(default=0)),
                ('createTime', models.DateTimeField(default=django.utils.timezone.now)),
                ('startTime', models.DateTimeField(null=True)),
                ('finishTime', models.DateTimeField(null=True)),
                ('parameter', models.TextField()),
                ('expect', models.BooleanField()),
                ('status', models.IntegerField(default=10)),
                ('remark', models.TextField(null=True)),
            ],
            options={
                'db_table': 'SplitResult',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('testcases', models.TextField()),
                ('browsers', models.TextField(null=True)),
                ('status', models.IntegerField(default=1, null=True)),
                ('timing', models.IntegerField(default=1)),
                ('remark', models.TextField(null=True)),
                ('createTime', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'Task',
            },
        ),
        migrations.CreateModel(
            name='TestCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('projectId', models.IntegerField()),
                ('title', models.CharField(max_length=200)),
                ('level', models.IntegerField(default=1)),
                ('beforeLogin', models.TextField(null=True)),
                ('steps', models.TextField()),
                ('parameter', models.TextField()),
                ('checkType', models.TextField()),
                ('checkValue', models.TextField()),
                ('checkText', models.TextField(null=True)),
                ('selectText', models.TextField(null=True)),
                ('createTime', models.DateTimeField(default=django.utils.timezone.now)),
                ('remark', models.TextField(null=True)),
            ],
            options={
                'db_table': 'testcase',
            },
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('telephone', models.CharField(max_length=11, null=True, unique=True)),
                ('avatar', models.FileField(default='/avatars/default.png', upload_to='avatars/')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
